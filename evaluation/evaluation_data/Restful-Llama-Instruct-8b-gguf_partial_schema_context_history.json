{
  "questions": [
    "I would like to see the price tables for event 1, with 10 results per page",
    "Now select one and put in draft mode"
  ],
  "target_context_calls": [
    "get_context(path='/event/{event_id}/price-table/', method='get')",
    "get_context(path='/event/{event_id}/price-table/{price_table_id}/draft/', method='post')"
  ],
  "parameters": [
    [
      "event_id: integer, required: True",
      "page: integer, required: False",
      "size: integer, required: False"
    ],
    [
      "event_id: integer, required: True",
      "price_table_id: integer, required: True"
    ]
  ],
  "history": [
    {
      "role": "system",
      "content": "You are a helpful assistant that can generate Python code to interact with an application's API. You have access to the application's API endpoints and their corresponding schemas.\n                When a user asks a question, your task is to ask for additional context about the API endpoints as needed, reason about the schema context, and how it can answer the question or part of it.\n                You can ask for context about an API endpoint by making a call to get_context function call, that takes two arguments: path and method. path=/path/, method='method'.\n                Look at the schema context to understand what PARAMETERS are required to call each endpoint.\n                The application's API endpoints are: <Path> /event/ </Path> <Method> get </Method> <Summary> Read Events </Summary>\n<Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> get </Method> <Summary> Read Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> delete </Method> <Summary> Delete Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> put </Method> <Summary> Update Event </Summary>\n<Path> /event/{event_id}/price/ </Path> <Method> get </Method> <Summary> Get Event Pricing </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> post </Method> <Summary> Create Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> put </Method> <Summary> Update Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> delete </Method> <Summary> Delete Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> get </Method> <Summary> Read Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> get </Method> <Summary> Read Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> delete </Method> <Summary> Delete Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> put </Method> <Summary> Edit Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/capacity/ </Path> <Method> get </Method> <Summary> Read Performance Capacity </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seat-history/ </Path> <Method> get </Method> <Summary> Read Performance Seat History </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seating-object/ </Path> <Method> patch </Method> <Summary> Edit Performance Seating </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/price-band/ </Path> <Method> get </Method> <Summary> Get Price Table Version Bands Endpoint </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> post </Method> <Summary> Create Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> get </Method> <Summary> Read Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> put </Method> <Summary> Update Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> delete </Method> <Summary> Delete Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/publish/ </Path> <Method> post </Method> <Summary> Publish Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/draft/ </Path> <Method> post </Method> <Summary> Create Price Table Draft </Summary>\n<Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary>\n<Path> /product/ </Path> <Method> post </Method> <Summary> Create Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> get </Method> <Summary> Read Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> delete </Method> <Summary> Delete Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary>\n<Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> get </Method> <Summary> Get Product Performance Inventories </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> delete </Method> <Summary> Delete Product Performance Inventory </Summary>\n<Path> /discount/ </Path> <Method> get </Method> <Summary> Get Discounts </Summary>\n<Path> /discount/ </Path> <Method> post </Method> <Summary> Create Discount </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> put </Method> <Summary> Create Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> patch </Method> <Summary> Patch Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> get </Method> <Summary> Get Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/{discount_visibility_id}/ </Path> <Method> delete </Method> <Summary> Delete Discount Visibility </Summary>\n\n                Please respond with a get_context request to clarify the API endpoint needed to answer the user's question.\n                Remember to use the schema context to generate the Python code"
    },
    {
      "role": "user",
      "content": "I would like to see the price tables for event 1, with 10 results per page"
    },
    {
      "role": "assistant",
      "content": "get_context('/event/{event_id}/price-table/', 'get')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary> <Parameters> ['event_id: integer, required: True', 'page: integer, required: False', 'size: integer, required: False'] </Parameters> <Request> {} </Request> <Response> [[{'title': 'metadata', 'type': [{'title': 'pageNumber', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'totalPages', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'numberOfResults', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'perPage', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'firstPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'lastPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'nextPerformance', 'type': 'string or null', 'enum': '', 'required': False}], 'required': True}, {'title': 'data', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': True}, {'title': 'description', 'type': 'string', 'enum': '', 'required': True}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'currentVersionNumber', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Here is the Python code to answer your question: import requests  event_id = 1 page = 1 size = 10  url = f\"/event/{event_id}/price-table?page={page}&size={size}\" response = requests.get(url)  if response.status_code == 200:     metadata = response.json()[\"metadata\"]     data = response.json()[\"data\"]     for item in data:         print(item[\"name\"], item[\"description\"]) else:     print(\"Failed to retrieve price tables:\", response.text)"
    },
    {
      "role": "user",
      "content": "Now select one and put in draft mode"
    },
    {
      "role": "assistant",
      "content": "get_context('/product/{product_id}/draft/', 'post')"
    },
    {
      "role": "assistant",
      "content": "Couldn't find that path and method in the schema context. Are you sure it's that path and method? Could be a bulk operation or patch? Do not put params in the URL path during context calls."
    },
    {
      "role": "assistant",
      "content": " Only the path is needed.  Let me try again with what I have: get_context('/product/{product_id}/draft/', 'post')"
    },
    {
      "role": "assistant",
      "content": "Couldn't find that path and method in the schema context. Are you sure it's that path and method? Could be a bulk operation or patch? Do not put params in the URL path during context calls."
    },
    {
      "role": "assistant",
      "content": "  It seems like we need more information about the product ID and how to put an existing price table in draft mode. Can you provide more context or clarify what you're trying to achieve?"
    }
  ]
}
{
  "questions": [
    "Can you update the product with ID 1 to have a title of 'New Product' and description of 'This is a great product'?"
  ],
  "target_context_calls": [
    "get_context(path='/product/{product_id}/', method='put')"
  ],
  "parameters": [
    [
      "product_id: integer, required: True"
    ]
  ],
  "history": [
    {
      "role": "system",
      "content": "You are a helpful assistant that can generate Python code to interact with an application's API. You have access to the application's API endpoints and their corresponding schemas.\n                When a user asks a question, your task is to ask for additional context about the API endpoints as needed, reason about the schema context, and how it can answer the question or part of it.\n                You can ask for context about an API endpoint by making a call to get_context function call, that takes two arguments: path and method. path=/path/, method='method'.\n                Look at the schema context to understand what PARAMETERS are required to call each endpoint.\n                The application's API endpoints are: <Path> /event/ </Path> <Method> get </Method> <Summary> Read Events </Summary>\n<Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> get </Method> <Summary> Read Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> delete </Method> <Summary> Delete Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> put </Method> <Summary> Update Event </Summary>\n<Path> /event/{event_id}/price/ </Path> <Method> get </Method> <Summary> Get Event Pricing </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> post </Method> <Summary> Create Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> put </Method> <Summary> Update Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> delete </Method> <Summary> Delete Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> get </Method> <Summary> Read Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> get </Method> <Summary> Read Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> delete </Method> <Summary> Delete Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> put </Method> <Summary> Edit Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/capacity/ </Path> <Method> get </Method> <Summary> Read Performance Capacity </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seat-history/ </Path> <Method> get </Method> <Summary> Read Performance Seat History </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seating-object/ </Path> <Method> patch </Method> <Summary> Edit Performance Seating </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/price-band/ </Path> <Method> get </Method> <Summary> Get Price Table Version Bands Endpoint </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> post </Method> <Summary> Create Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> get </Method> <Summary> Read Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> put </Method> <Summary> Update Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> delete </Method> <Summary> Delete Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/publish/ </Path> <Method> post </Method> <Summary> Publish Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/draft/ </Path> <Method> post </Method> <Summary> Create Price Table Draft </Summary>\n<Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary>\n<Path> /product/ </Path> <Method> post </Method> <Summary> Create Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> get </Method> <Summary> Read Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> delete </Method> <Summary> Delete Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary>\n<Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> get </Method> <Summary> Get Product Performance Inventories </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> delete </Method> <Summary> Delete Product Performance Inventory </Summary>\n<Path> /discount/ </Path> <Method> get </Method> <Summary> Get Discounts </Summary>\n<Path> /discount/ </Path> <Method> post </Method> <Summary> Create Discount </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> put </Method> <Summary> Create Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> patch </Method> <Summary> Patch Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> get </Method> <Summary> Get Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/{discount_visibility_id}/ </Path> <Method> delete </Method> <Summary> Delete Discount Visibility </Summary>\n\n                Please respond with a get_context request to clarify the API endpoint needed to answer the user's question.\n                Remember to use the schema context to generate the Python code"
    },
    {
      "role": "user",
      "content": "Can you update the product with ID 1 to have a title of 'New Product' and description of 'This is a great product'?"
    },
    {
      "role": "assistant",
      "content": "get_context('/product/{product_id}/', 'put')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary> <Parameters> ['product_id: integer, required: True'] </Parameters> <Request> [{'properties': {'title': {'type': 'string', 'maxLength': 255, 'title': 'Title', 'examples': ['product1']}, 'description': {'type': 'string', 'maxLength': 5000, 'title': 'Description', 'examples': ['product description']}, 'externalId': {'anyOf': [{'type': 'string', 'maxLength': 255}, {'type': 'null'}], 'title': 'Externalid', 'examples': ['123abc']}, 'standaloneAvailable': {'type': 'boolean', 'title': 'Standaloneavailable', 'default': False, 'examples': [True]}, 'image': {'anyOf': [{'$ref': '#/components/schemas/ObjectWithId'}, {'type': 'null'}]}, 'archive': {'type': 'boolean', 'title': 'Archive', 'default': False, 'examples': [False]}, 'tags': {'anyOf': [{'items': {'anyOf': [{'$ref': '#/components/schemas/Tag'}, {'$ref': '#/components/schemas/TagCreate'}]}, 'type': 'array'}, {'type': 'null'}], 'title': 'Tags'}, 'channels': {'anyOf': [{'items': {'$ref': '#/components/schemas/ObjectWithId'}, 'type': 'array'}, {'type': 'null'}], 'title': 'Channels'}, 'priceTableId': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Pricetableid'}, 'inventory': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Inventory', 'examples': [100]}, 'type': {'const': 'VOUCHER', 'title': 'Type'}, 'voucherName': {'type': 'string', 'maxLength': 255, 'title': 'Vouchername', 'examples': ['product1']}, 'voucherExpiryDeltaDays': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Voucherexpirydeltadays', 'examples': [100]}}, 'type': 'object', 'required': ['title', 'description', 'type', 'voucherName'], 'title': 'VoucherProductMutate', 'description': ''}, {'properties': {'title': {'type': 'string', 'maxLength': 255, 'title': 'Title', 'examples': ['product1']}, 'description': {'type': 'string', 'maxLength': 5000, 'title': 'Description', 'examples': ['product description']}, 'externalId': {'anyOf': [{'type': 'string', 'maxLength': 255}, {'type': 'null'}], 'title': 'Externalid', 'examples': ['123abc']}, 'standaloneAvailable': {'type': 'boolean', 'title': 'Standaloneavailable', 'default': False, 'examples': [True]}, 'image': {'anyOf': [{'$ref': '#/components/schemas/ObjectWithId'}, {'type': 'null'}]}, 'archive': {'type': 'boolean', 'title': 'Archive', 'default': False, 'examples': [False]}, 'tags': {'anyOf': [{'items': {'anyOf': [{'$ref': '#/components/schemas/Tag'}, {'$ref': '#/components/schemas/TagCreate'}]}, 'type': 'array'}, {'type': 'null'}], 'title': 'Tags'}, 'channels': {'anyOf': [{'items': {'$ref': '#/components/schemas/ObjectWithId'}, 'type': 'array'}, {'type': 'null'}], 'title': 'Channels'}, 'priceTableId': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Pricetableid'}, 'inventory': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Inventory', 'examples': [100]}, 'type': {'type': 'string', 'enum': ['GENERIC', 'PHYSICAL', 'DIGITAL', 'HOSPITALITY', 'SERVICE'], 'title': 'Type'}}, 'type': 'object', 'required': ['title', 'description', 'type'], 'title': 'ProductMutate'}] </Request> <Response> [[{'title': 'data', 'type': [{'title': 'title', 'type': 'string', 'enum': '', 'required': True}, {'title': 'description', 'type': 'string', 'enum': '', 'required': True}, {'title': 'externalId', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'standaloneAvailable', 'type': 'boolean', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'type', 'type': 'string', 'enum': '', 'required': True}, {'title': 'image', 'type': \"[{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'url', 'type': 'string', 'enum': '', 'required': True}] or null\", 'enum': '', 'required': False}, {'title': 'tags', 'type': 'array or null', 'enum': '', 'required': False}, {'title': 'archivedAt', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'priceTable', 'type': \"[{'title': 'name', 'type': 'string', 'enum': '', 'required': True}, {'title': 'description', 'type': 'string', 'enum': '', 'required': True}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'currentVersionNumber', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}] or null\", 'enum': '', 'required': False}, {'title': 'inventory', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'quantitySold', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'channels', 'type': 'array or null', 'enum': '', 'required': False}, {'title': 'visibilityRuleSet', 'type': '<DEFINE LATER> VisibilityRules or null', 'enum': '', 'required': False}, {'title': 'voucherName', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'voucherExpiryDeltaDays', 'type': 'integer or null', 'enum': '', 'required': False}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Now that we have the schema context, here is an example of how you could update a product with ID 1 to have a title of 'New Product' and description of 'This is a great product':      import requests  url = \"http://webserver/api/product/1\" payload = {\"title\": \"New Product\", \"description\": \"This is a great product\"} response = requests.put(url, json=payload)  if response.status_code == 200:     print(\"Product updated successfully\") else:     print(\"Error:\", response.text)"
    }
  ]
}
{
  "questions": [
    "Get me the pricing for all products that are not archived with 50 prices per page"
  ],
  "target_context_calls": [
    "get_context(path='/product/{product_id}/price/', method='get')"
  ],
  "parameters": [
    [
      "product_id: integer, required: True",
      "page: integer, required: False",
      "size: integer, required: False",
      "sort_by: [{'type': 'string', 'const': 'id', 'title': 'PriceSortBy', 'description': 'Admin API Price Sort By Enum'}], required: False",
      "sort_direction: [{'type': 'string', 'enum': ['asc', 'desc'], 'title': 'SortDirection', 'description': 'Sort Direction Enum'}], required: False",
      "publishedAt: ['string', 'null'], required: False",
      "publishedAt.gte: ['string', 'null'], required: False",
      "publishedAt.lte: ['string', 'null'], required: False",
      "publishedAt.gt: ['string', 'null'], required: False",
      "publishedAt.lt: ['string', 'null'], required: False"
    ]
  ],
  "history": [
    {
      "role": "system",
      "content": "You are a helpful assistant that can generate Python code to interact with an application's API. You have access to the application's API endpoints and their corresponding schemas.\n                When a user asks a question, your task is to ask for additional context about the API endpoints as needed, reason about the schema context, and how it can answer the question or part of it.\n                You can ask for context about an API endpoint by making a call to get_context function call, that takes two arguments: path and method. path=/path/, method='method'.\n                Look at the schema context to understand what PARAMETERS are required to call each endpoint.\n                The application's API endpoints are: <Path> /event/ </Path> <Method> get </Method> <Summary> Read Events </Summary>\n<Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> get </Method> <Summary> Read Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> delete </Method> <Summary> Delete Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> put </Method> <Summary> Update Event </Summary>\n<Path> /event/{event_id}/price/ </Path> <Method> get </Method> <Summary> Get Event Pricing </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> post </Method> <Summary> Create Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> put </Method> <Summary> Update Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> delete </Method> <Summary> Delete Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> get </Method> <Summary> Read Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> get </Method> <Summary> Read Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> delete </Method> <Summary> Delete Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> put </Method> <Summary> Edit Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/capacity/ </Path> <Method> get </Method> <Summary> Read Performance Capacity </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seat-history/ </Path> <Method> get </Method> <Summary> Read Performance Seat History </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seating-object/ </Path> <Method> patch </Method> <Summary> Edit Performance Seating </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/price-band/ </Path> <Method> get </Method> <Summary> Get Price Table Version Bands Endpoint </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> post </Method> <Summary> Create Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> get </Method> <Summary> Read Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> put </Method> <Summary> Update Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> delete </Method> <Summary> Delete Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/publish/ </Path> <Method> post </Method> <Summary> Publish Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/draft/ </Path> <Method> post </Method> <Summary> Create Price Table Draft </Summary>\n<Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary>\n<Path> /product/ </Path> <Method> post </Method> <Summary> Create Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> get </Method> <Summary> Read Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> delete </Method> <Summary> Delete Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary>\n<Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> get </Method> <Summary> Get Product Performance Inventories </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> delete </Method> <Summary> Delete Product Performance Inventory </Summary>\n<Path> /discount/ </Path> <Method> get </Method> <Summary> Get Discounts </Summary>\n<Path> /discount/ </Path> <Method> post </Method> <Summary> Create Discount </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> put </Method> <Summary> Create Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> patch </Method> <Summary> Patch Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> get </Method> <Summary> Get Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/{discount_visibility_id}/ </Path> <Method> delete </Method> <Summary> Delete Discount Visibility </Summary>\n\n                Please respond with a get_context request to clarify the API endpoint needed to answer the user's question.\n                Remember to use the schema context to generate the Python code"
    },
    {
      "role": "user",
      "content": "Get me the pricing for all products that are not archived with 50 prices per page"
    },
    {
      "role": "assistant",
      "content": "get_context('/product/{product_id}/price/', 'get')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary> <Parameters> ['product_id: integer, required: True', 'page: integer, required: False', 'size: integer, required: False', \"sort_by: [{'type': 'string', 'const': 'id', 'title': 'PriceSortBy', 'description': 'Admin API Price Sort By Enum'}], required: False\", \"sort_direction: [{'type': 'string', 'enum': ['asc', 'desc'], 'title': 'SortDirection', 'description': 'Sort Direction Enum'}], required: False\", \"publishedAt: ['string', 'null'], required: False\", \"publishedAt.gte: ['string', 'null'], required: False\", \"publishedAt.lte: ['string', 'null'], required: False\", \"publishedAt.gt: ['string', 'null'], required: False\", \"publishedAt.lt: ['string', 'null'], required: False\"] </Parameters> <Request> {} </Request> <Response> [[{'title': 'metadata', 'type': [{'title': 'pageNumber', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'totalPages', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'numberOfResults', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'perPage', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'firstPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'lastPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'nextPerformance', 'type': 'string or null', 'enum': '', 'required': False}], 'required': True}, {'title': 'data', 'type': [{'title': 'value', 'type': 'number or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'discountId', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'priceAdjusterId', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'priceBand', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': True}, {'title': 'color', 'type': 'string', 'enum': '', 'required': True}, {'title': 'icon', 'type': 'string', 'enum': '', 'required': True}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'priceVariant', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'name', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                It seems like the API endpoint  /product/{product_id}/price/  is not suitable for this request because it requires a specific product ID and doesn't seem to support pagination or filtering by archived status.     Instead, I think we need an endpoint that lists all products and allows us to filter by archived status. Let me try again:  get_context('/product/', 'get')   Please provide the schema context for this endpoint."
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary> <Parameters> ['archived: boolean, required: False', 'page: integer, required: False', 'size: integer, required: False', \"sort_by: [{'type': 'string', 'enum': ['id', 'name', 'createdAt'], 'title': 'ProductSortBy', 'description': 'Event Sort By Enum'}], required: False\", \"sort_direction: [{'type': 'string', 'enum': ['asc', 'desc'], 'title': 'SortDirection', 'description': 'Sort Direction Enum'}], required: False\"] </Parameters> <Request> {} </Request> <Response> [[{'title': 'metadata', 'type': [{'title': 'pageNumber', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'totalPages', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'numberOfResults', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'perPage', 'type': 'integer or null', 'enum': '', 'required': True}, {'title': 'firstPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'lastPerformance', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'nextPerformance', 'type': 'string or null', 'enum': '', 'required': False}], 'required': True}, {'title': 'data', 'type': [{'title': 'title', 'type': 'string', 'enum': '', 'required': True}, {'title': 'description', 'type': 'string', 'enum': '', 'required': True}, {'title': 'externalId', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'standaloneAvailable', 'type': 'boolean', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'type', 'type': 'string', 'enum': '', 'required': True}, {'title': 'image', 'type': \"[{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'url', 'type': 'string', 'enum': '', 'required': True}] or null\", 'enum': '', 'required': False}, {'title': 'tags', 'type': 'array or null', 'enum': '', 'required': False}, {'title': 'archivedAt', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    }
  ]
}
{
  "questions": [
    "I have a product with ID 1, and performance with ID 12. Get me the product-performance-inventory.",
    "Now update the inventory with a value of 50"
  ],
  "target_context_calls": [
    "get_context(path='/product-performance-inventory/', method='get')",
    "get_context(path='/product-performance-inventory/', method='put')"
  ],
  "parameters": [
    [
      "page: integer, required: False",
      "size: integer, required: False",
      "performance_id: ['integer', 'null'], required: False",
      "product_id: ['integer', 'null'], required: False"
    ],
    []
  ],
  "history": [
    {
      "role": "system",
      "content": "You are a helpful assistant that can generate Python code to interact with an application's API. You have access to the application's API endpoints and their corresponding schemas.\n                When a user asks a question, your task is to ask for additional context about the API endpoints as needed, reason about the schema context, and how it can answer the question or part of it.\n                You can ask for context about an API endpoint by making a call to get_context function call, that takes two arguments: path and method. path=/path/, method='method'.\n                Look at the schema context to understand what PARAMETERS are required to call each endpoint.\n                The application's API endpoints are: <Path> /event/ </Path> <Method> get </Method> <Summary> Read Events </Summary>\n<Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> get </Method> <Summary> Read Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> delete </Method> <Summary> Delete Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> put </Method> <Summary> Update Event </Summary>\n<Path> /event/{event_id}/price/ </Path> <Method> get </Method> <Summary> Get Event Pricing </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> post </Method> <Summary> Create Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> put </Method> <Summary> Update Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> delete </Method> <Summary> Delete Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> get </Method> <Summary> Read Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> get </Method> <Summary> Read Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> delete </Method> <Summary> Delete Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> put </Method> <Summary> Edit Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/capacity/ </Path> <Method> get </Method> <Summary> Read Performance Capacity </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seat-history/ </Path> <Method> get </Method> <Summary> Read Performance Seat History </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seating-object/ </Path> <Method> patch </Method> <Summary> Edit Performance Seating </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/price-band/ </Path> <Method> get </Method> <Summary> Get Price Table Version Bands Endpoint </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> post </Method> <Summary> Create Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> get </Method> <Summary> Read Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> put </Method> <Summary> Update Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> delete </Method> <Summary> Delete Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/publish/ </Path> <Method> post </Method> <Summary> Publish Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/draft/ </Path> <Method> post </Method> <Summary> Create Price Table Draft </Summary>\n<Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary>\n<Path> /product/ </Path> <Method> post </Method> <Summary> Create Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> get </Method> <Summary> Read Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> delete </Method> <Summary> Delete Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary>\n<Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> get </Method> <Summary> Get Product Performance Inventories </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> delete </Method> <Summary> Delete Product Performance Inventory </Summary>\n<Path> /discount/ </Path> <Method> get </Method> <Summary> Get Discounts </Summary>\n<Path> /discount/ </Path> <Method> post </Method> <Summary> Create Discount </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> put </Method> <Summary> Create Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> patch </Method> <Summary> Patch Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> get </Method> <Summary> Get Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/{discount_visibility_id}/ </Path> <Method> delete </Method> <Summary> Delete Discount Visibility </Summary>\n\n                Please respond with a get_context request to clarify the API endpoint needed to answer the user's question.\n                Remember to use the schema context to generate the Python code"
    },
    {
      "role": "user",
      "content": "I have a product with ID 1, and performance with ID 12. Get me the product-performance-inventory."
    },
    {
      "role": "assistant",
      "content": "get_context('/product-performance-inventory/', 'post')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary> <Parameters> [] </Parameters> <Request> [{'title': 'productId', 'type': 'integer', 'required': True}, {'title': 'performanceId', 'type': 'integer', 'required': True}, {'title': 'inventory', 'type': ['integer', 'null'], 'required': False}] </Request> <Response> [[{'title': 'data', 'type': [{'title': 'productId', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'performanceId', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'inventory', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'quantitySold', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'product', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'title', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'performance', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'startDate', 'type': 'string', 'enum': '', 'required': False}, {'title': 'startTime', 'type': 'string', 'enum': '', 'required': False}, {'title': 'endDate', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'endTime', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'timeZone', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'event', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'name', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}], 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Here's how you can use this schema to answer the question:      import requests  url = \"https://api.example.com/product-performance-inventory\" payload = {     \"productId\": 1,     \"performanceId\": 12,     \"inventory\": 10 }  response = requests.post(url, json=payload)  if response.status_code == 200:     data = response.json()     print(data[\"data\"]) else:     print(\"Error:\", response.text)      This code sends a POST request to the  /product-performance-inventory  endpoint with the required parameters and prints the response."
    },
    {
      "role": "user",
      "content": "Now update the inventory with a value of 50"
    },
    {
      "role": "assistant",
      "content": "get_context('/product-performance-inventory/', 'put')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary> <Parameters> [] </Parameters> <Request> [{'title': 'productId', 'type': 'integer', 'required': True}, {'title': 'performanceId', 'type': 'integer', 'required': True}, {'title': 'inventory', 'type': ['integer', 'null'], 'required': False}] </Request> <Response> [[{'title': 'data', 'type': [{'title': 'productId', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'performanceId', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'inventory', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'quantitySold', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'product', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'title', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'performance', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'startDate', 'type': 'string', 'enum': '', 'required': False}, {'title': 'startTime', 'type': 'string', 'enum': '', 'required': False}, {'title': 'endDate', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'endTime', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'timeZone', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'event', 'type': [{'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'name', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}], 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Here's how you can use this schema to answer the question:      import requests  url = \"https://api.example.com/product-performance-inventory\" payload = {     \"productId\": 1,     \"performanceId\": 12,     \"inventory\": 50 }  response = requests.put(url, json=payload)  if response.status_code == 200:     data = response.json()     print(data[\"data\"]) else:     print(\"Error:\", response.text)"
    }
  ]
}
{
  "questions": [
    "I want to create a new Event called 'Spectacular Show' with a description of 'A show like no other'",
    "Now setup 10 performances for this event, starting from tomorrow at 10:00 AM, and ending the day after at 10:00 PM"
  ],
  "target_context_calls": [
    "get_context(path='/event/', method='post')",
    "get_context(path='/event/{event_id}/performance/', method='post')"
  ],
  "parameters": [
    [],
    [
      "event_id: integer, required: True"
    ]
  ],
  "history": [
    {
      "role": "system",
      "content": "You are a helpful assistant that can generate Python code to interact with an application's API. You have access to the application's API endpoints and their corresponding schemas.\n                When a user asks a question, your task is to ask for additional context about the API endpoints as needed, reason about the schema context, and how it can answer the question or part of it.\n                You can ask for context about an API endpoint by making a call to get_context function call, that takes two arguments: path and method. path=/path/, method='method'.\n                Look at the schema context to understand what PARAMETERS are required to call each endpoint.\n                The application's API endpoints are: <Path> /event/ </Path> <Method> get </Method> <Summary> Read Events </Summary>\n<Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> get </Method> <Summary> Read Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> delete </Method> <Summary> Delete Event </Summary>\n<Path> /event/{event_id}/ </Path> <Method> put </Method> <Summary> Update Event </Summary>\n<Path> /event/{event_id}/price/ </Path> <Method> get </Method> <Summary> Get Event Pricing </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> post </Method> <Summary> Create Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> put </Method> <Summary> Update Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/bulk/ </Path> <Method> delete </Method> <Summary> Delete Bulk Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> get </Method> <Summary> Read Performances </Summary>\n<Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> get </Method> <Summary> Read Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> delete </Method> <Summary> Delete Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/ </Path> <Method> put </Method> <Summary> Edit Performance </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/capacity/ </Path> <Method> get </Method> <Summary> Read Performance Capacity </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seat-history/ </Path> <Method> get </Method> <Summary> Read Performance Seat History </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/seating-object/ </Path> <Method> patch </Method> <Summary> Edit Performance Seating </Summary>\n<Path> /event/{event_id}/performance/{performance_id}/price-band/ </Path> <Method> get </Method> <Summary> Get Price Table Version Bands Endpoint </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> get </Method> <Summary> Read Price Tables </Summary>\n<Path> /event/{event_id}/price-table/ </Path> <Method> post </Method> <Summary> Create Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> get </Method> <Summary> Read Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> put </Method> <Summary> Update Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/ </Path> <Method> delete </Method> <Summary> Delete Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/publish/ </Path> <Method> post </Method> <Summary> Publish Price Table </Summary>\n<Path> /event/{event_id}/price-table/{price_table_id}/draft/ </Path> <Method> post </Method> <Summary> Create Price Table Draft </Summary>\n<Path> /product/ </Path> <Method> get </Method> <Summary> Read Products </Summary>\n<Path> /product/ </Path> <Method> post </Method> <Summary> Create Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> get </Method> <Summary> Read Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> delete </Method> <Summary> Delete Product </Summary>\n<Path> /product/{product_id}/ </Path> <Method> put </Method> <Summary> Edit Product </Summary>\n<Path> /product/{product_id}/price/ </Path> <Method> get </Method> <Summary> Read Product Pricing </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> get </Method> <Summary> Get Product Performance Inventories </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> post </Method> <Summary> Create Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> put </Method> <Summary> Update Product Performance Inventory </Summary>\n<Path> /product-performance-inventory/ </Path> <Method> delete </Method> <Summary> Delete Product Performance Inventory </Summary>\n<Path> /discount/ </Path> <Method> get </Method> <Summary> Get Discounts </Summary>\n<Path> /discount/ </Path> <Method> post </Method> <Summary> Create Discount </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> put </Method> <Summary> Create Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> patch </Method> <Summary> Patch Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/ </Path> <Method> get </Method> <Summary> Get Discount Visibility </Summary>\n<Path> /discount/{discount_id}/visibility/{discount_visibility_id}/ </Path> <Method> delete </Method> <Summary> Delete Discount Visibility </Summary>\n\n                Please respond with a get_context request to clarify the API endpoint needed to answer the user's question.\n                Remember to use the schema context to generate the Python code"
    },
    {
      "role": "user",
      "content": "I want to create a new Event called 'Spectacular Show' with a description of 'A show like no other'"
    },
    {
      "role": "assistant",
      "content": "get_context('/event/', 'post')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /event/ </Path> <Method> post </Method> <Summary> Create Event </Summary> <Parameters> [] </Parameters> <Request> [{'title': 'name', 'type': 'string', 'required': True}, {'title': 'description', 'type': ['string', 'null'], 'required': False}, {'title': 'shortDescription', 'type': ['string', 'null'], 'required': False}, {'title': 'bookingInformation', 'type': ['string', 'null'], 'required': False}, {'title': 'runTime', 'type': ['string', 'null'], 'required': False}, {'title': 'hasInterval', 'type': ['boolean', 'null'], 'required': False}, {'title': 'intervalTime', 'type': ['string', 'null'], 'required': False}, {'title': 'externalId', 'type': ['string', 'null'], 'required': False}, {'title': 'notes', 'type': ['string', 'null'], 'required': False}, {'title': 'image', 'type': [{'properties': {'id': {'type': 'integer', 'title': 'Id'}}, 'type': 'object', 'required': ['id'], 'title': 'ObjectWithId', 'description': 'Schema for objects with just ID'}, 'null'], 'required': False}, {'title': 'venueId', 'type': 'integer', 'required': True}, {'title': 'channels', 'type': ['array', 'null'], 'required': False}, {'title': 'archive', 'type': ['boolean', 'null'], 'required': False}, {'title': 'tags', 'type': ['array', 'null'], 'required': False}, {'title': 'optIns', 'type': ['array', 'null'], 'required': False}, {'title': 'seatViewBaseUrl', 'type': ['string', 'null'], 'required': False}] </Request> <Response> [[{'title': 'data', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': True}, {'title': 'description', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'shortDescription', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'bookingInformation', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'runTime', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'hasInterval', 'type': 'boolean or null', 'enum': '', 'required': False}, {'title': 'intervalTime', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'externalId', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'notes', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'archivedAt', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'image', 'type': '<DEFINE LATER> Image or null', 'enum': '', 'required': False}, {'title': 'venue', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': False}, {'title': 'lat', 'type': 'number or null', 'enum': '', 'required': False}, {'title': 'lng', 'type': 'number or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'archivedAt', 'type': 'string or null', 'enum': '', 'required': False}], 'enum': '', 'required': True}, {'title': 'tags', 'type': [{'title': 'name', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'channels', 'type': 'array or null', 'enum': '', 'required': False}, {'title': 'optIns', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': True}, {'title': 'text', 'type': 'string', 'enum': '', 'required': True}, {'title': 'mandatory', 'type': 'boolean', 'enum': '', 'required': True}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'archivedAt', 'type': 'string or null', 'enum': '', 'required': False}], 'enum': '', 'required': True}, {'title': 'seatViewBaseUrl', 'type': 'string or null', 'enum': '', 'required': False}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Now, use this schema context to generate Python code for creating a new Event called 'Spectacular Show' with a description of 'A show like no other'.  Here is the Python code:      import requests  url = \"https://api.example.com/event\" payload = {     \"name\": \"Spectacular Show\",     \"description\": \"A show like no other\" }  response = requests.post(url, json=payload)  if response.status_code == 201:     print(\"Event created successfully\") else:     print(\"Error creating event:\", response.text)"
    },
    {
      "role": "user",
      "content": "Now setup 10 performances for this event, starting from tomorrow at 10:00 AM, and ending the day after at 10:00 PM"
    },
    {
      "role": "assistant",
      "content": "get_context('/event/{event_id}/performance/', 'post')"
    },
    {
      "role": "assistant",
      "content": "Here is the schema context, now use it to answer the question: <Path> /event/{event_id}/performance/ </Path> <Method> post </Method> <Summary> Create Performance </Summary> <Parameters> ['event_id: integer, required: True'] </Parameters> <Request> [{'title': 'startDate', 'type': 'string', 'required': False}, {'title': 'startTime', 'type': 'string', 'required': False}, {'title': 'endDate', 'type': ['string', 'null'], 'required': False}, {'title': 'endTime', 'type': ['string', 'null'], 'required': False}, {'title': 'timeZone', 'type': 'string', 'required': True}, {'title': 'tags', 'type': ['array', 'null'], 'required': False}, {'title': 'notes', 'type': ['string', 'null'], 'required': False}, {'title': 'description', 'type': ['string', 'null'], 'required': False}, {'title': 'priceProfileId', 'type': ['integer', 'null'], 'required': False}, {'title': 'performanceVisibilities', 'type': ['array', 'null'], 'required': False}, {'title': 'canceled', 'type': ['boolean', 'null'], 'required': False}, {'title': 'priceProfile', 'type': ['boolean', 'null'], 'required': False}] </Request> <Response> [[{'title': 'data', 'type': [{'title': 'startDate', 'type': 'string', 'enum': '', 'required': False}, {'title': 'startTime', 'type': 'string', 'enum': '', 'required': False}, {'title': 'endDate', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'endTime', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'timeZone', 'type': 'string', 'enum': '', 'required': True}, {'title': 'tags', 'type': 'array or null', 'enum': '', 'required': False}, {'title': 'notes', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'description', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'canceled', 'type': 'boolean', 'enum': '', 'required': True}, {'title': 'canceledAt', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'eventId', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'priceProfile', 'type': '<DEFINE LATER> PriceProfile or null', 'enum': '', 'required': False}, {'title': 'performanceVisibilities', 'type': [{'title': 'onSaleDate', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'onSaleDeltaMinutes', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'onSaleDisplayUnit', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'offSaleDate', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'offSaleDeltaMinutes', 'type': 'integer or null', 'enum': '', 'required': False}, {'title': 'offSaleDisplayUnit', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'onSaleStartDateTime', 'type': 'string or null', 'enum': '', 'required': True}, {'title': 'offSaleStartDateTime', 'type': 'string or null', 'enum': '', 'required': True}, {'title': 'onSale', 'type': 'boolean', 'enum': '', 'required': True}, {'title': 'channel', 'type': [{'title': 'name', 'type': 'string', 'enum': '', 'required': False}, {'title': 'description', 'type': 'string', 'enum': '', 'required': False}, {'title': 'status', 'type': '', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'tags', 'type': [{'title': 'name', 'type': 'string or null', 'enum': '', 'required': False}, {'title': 'id', 'type': 'integer', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'secondsToBook', 'type': 'integer', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'createdAt', 'type': 'string', 'enum': '', 'required': True}, {'title': 'updatedAt', 'type': 'string', 'enum': '', 'required': True}], 'enum': '', 'required': True}, {'title': 'linked', 'type': 'boolean', 'enum': '', 'required': True}], 'required': True}]] </Response>\n"
    },
    {
      "role": "assistant",
      "content": "                Now, use this schema context to generate Python code for creating 10 performances for the 'Spectacular Show' event.  Here is the Python code:      import requests  base_url = \"https://api.example.com\" event_id = 123  # Replace with actual event ID url = f\"{base_url}/event/{event_id}/performance/\" payload = {}  start_date = \"2023-03-01\" end_date = \"2023-03-04\" time_zone = \"America/New_York\"  for i in range(10):     start_time = \"10:00:00\"     end_time = \"22:00:00\"     if i % 2 == 0:         end_time = \"14:00:00\"      payload[\"name\"] = f\"Spectacular Show Performance {i+1}\"     payload[\"description\"] = \"A show like no other\"     payload[\"startDate\"] = f\"{start_date}\"     payload[\"startTime\"] = f\"{start_time}\"     payload[\"endDate\"] = f\"{end_date}\"     payload[\"endTime\"] = f\"{end_time}\"     payload[\"timeZone\"] = time_zone      response = requests.post(url, json=payload)      if response.status_code == 201:         print(\"Performance created successfully\")     else:         print(\"Error creating performance:\", response.text)      Note that you need to replace  event_id  with the actual ID of the 'Spectacular Show' event. Also, make sure to adjust the  start_date ,  end_date , and  time_zone  variables according to your requirements."
    }
  ]
}
